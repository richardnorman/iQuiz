{"version":3,"sources":["Components/Timer/Timer.js","Components/NavBar/NavBar.js","Components/QuestionCard/QuestionCard.js","Components/QuestionCardList/QuestionCardList.js","Components/StartMenu/StartMenu.js","Components/SubmitButton/SubmitButton.js","Components/QuestionResult/QuestionResult.js","Components/ResultsMenu/ResultsMenu.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Timer","props","useState","timer","setTimer","useEffect","interval","setInterval","quizStarted","quizComplete","console","log","timerDoneHandler","clearTimeout","className","NavBar","DisplayTimer","_","AppBar","position","Typography","variant","QuestionCard","BlueRadio","withStyles","root","color","checked","Radio","Card","CardContent","question","RadioGroup","onChange","radioChangeHandler","questionAnswers","map","answer","i","FormControlLabel","key","value","cardNumber","control","label","replace","QuestionCardList","questions","answers","radioHandler","element","StartMenu","Button","size","onClick","handler","SubmitButton","QuestionResult","style","index","ResultsMenu","Math","round","correctAnswers","LinearProgress","userAnswersArray","window","location","reload","questionsArray","answersArray","App","quizStartHandler","setState","submitClickedHandler","numberOfCorrectAnswers","forEach","event","cardID","target","substring","length","state","this","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d941cd8.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport './Timer.css';\r\n\r\nconst Timer = props => {\r\n    const [timer, setTimer] = useState(120);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (props.quizStarted && !props.quizComplete) {\r\n                console.log(timer);\r\n                setTimer(timer - 1);\r\n                if (timer === 0) {\r\n                    props.timerDoneHandler();\r\n                }\r\n            }\r\n        }, 1000);\r\n        return () => clearTimeout(interval);\r\n    })\r\n\r\n    return (\r\n        <h3 className='timer'>{timer} seconds remaining</h3>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ToolBar from '@material-ui/core/Toolbar'\r\nimport Timer from '../Timer/Timer';\r\nimport './NavBar.css';\r\n\r\nconst NavBar = props => {\r\n\r\n    const DisplayTimer = _ => {\r\n        if(props.quizStarted && !props.quizComplete) {\r\n            return <Timer timerDoneHandler={props.timerDoneHandler} quizStarted={props.quizStarted} quizComplete={props.quizComplete}/>\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AppBar position='fixed'>\r\n            <ToolBar>\r\n                <Typography variant='h4'>\r\n                    iQuiz\r\n                </Typography>\r\n                <DisplayTimer />\r\n            </ToolBar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport './QuestionCard.css';\r\n\r\nconst QuestionCard = props => {\r\n    const BlueRadio = withStyles({\r\n        root: {\r\n          color: '#default',\r\n          '&$checked': {\r\n            color: '#3f51b5',\r\n          },\r\n        },\r\n        checked: {},\r\n      })((props) => <Radio color=\"default\" {...props} />);\r\n\r\n    // const setAnswer = (event) => {\r\n    //     props.userAnswers[props.key] = event.target.value;\r\n    //     alert(props.userAnswers)\r\n    // }\r\n\r\n    return (\r\n        <Card className='question-card'>\r\n            <CardContent>\r\n                <Typography>\r\n                    {props.question}\r\n                </Typography>\r\n                <RadioGroup onChange={props.radioChangeHandler}>\r\n                    {props.questionAnswers.map((answer, i) => {\r\n                        return (\r\n                            <FormControlLabel \r\n                            key={'answer' + i} \r\n                            value={ props.cardNumber + ((answer[0] === '*') ? 'Correct' : 'Incorrect') + i } \r\n                            control={<BlueRadio />} \r\n                            label={answer.replace('*','')} \r\n                            />\r\n                        );\r\n                    })}\r\n                </RadioGroup>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default QuestionCard;","import React from 'react';\r\nimport './QuestionCardList.css';\r\nimport Card from '../QuestionCard/QuestionCard';\r\n\r\nconst QuestionCardList = ({ questions, answers, radioHandler, radioChangeHandler }) => {\r\n    return (\r\n        <div className='card-list'>\r\n            {questions.map((element, i) => {\r\n                return (\r\n                    <Card key={i} cardNumber={i} question={element} questionAnswers={answers[i]} radioChangeHandler={radioChangeHandler}/>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionCardList;","import React from 'react';\r\nimport './StartMenu.css';\r\nimport Button from '@material-ui/core/Button'\r\n\r\nconst StartMenu = props => {\r\n    return (\r\n        <div className='start-menu'>\r\n            <h1 className='start-title'>Ready to take the quiz?</h1>\r\n            <p className='start-description'>This quiz is a timed 2 minute test of cognitive ability. It was found that only 17% of university students get all three questions correct.</p>\r\n            <Button \r\n            className='start-button' \r\n            size='large' \r\n            variant=\"outlined\" \r\n            color=\"primary\"\r\n            onClick={props.handler}>\r\n                START\r\n            </Button>        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartMenu;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './SubmitButton.css';\r\n\r\nconst SubmitButton = props => {\r\n    return (\r\n        <Button onClick={props.handler} className='submit-button' variant='contained' size='large' color='primary'>SUBMIT</Button>\r\n    );\r\n}\r\n\r\nexport default SubmitButton;","import React, { Fragment } from 'react';\r\nimport './QuestionResult.css';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nconst QuestionResult = props => {\r\n    return (\r\n        <div className='answer-container'>\r\n            {\r\n                props.answer === 'Correct' ? \r\n                <DoneIcon style={{ color: 'green' }} /> :\r\n                <ClearIcon color='secondary'/>\r\n            }\r\n            <h4 className='answer-result'>{props.index + 1}. \r\n                {props.answer === '' ? \r\n                ' Incorrect': \r\n                ' ' + props.answer}\r\n            </h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuestionResult;","import React from 'react';\r\nimport './ResultsMenu.css';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport QuestionResult from '../QuestionResult/QuestionResult';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst ResultsMenu = props => {\r\n\r\n    const refreshPage = _ => {\r\n        window.location.reload(true);\r\n    }\r\n\r\n    return (\r\n        <div className='results-menu'>\r\n            <h1 className='results-title'>You scored {Math.round((props.correctAnswers/3)*100) + '%'}</h1>\r\n            <LinearProgress className='linear-results' variant='determinate' value={(props.correctAnswers/3)*100}/>\r\n            <div className='results-user-answers'>\r\n                {props.userAnswersArray.map((answer, i) => {\r\n                    return <QuestionResult key={i} index={i} answer={answer} />\r\n                })}\r\n            </div>\r\n            <Button\r\n            className='take-again-button' \r\n            size='large' \r\n            variant=\"outlined\" \r\n            color=\"primary\"\r\n            onClick={refreshPage}>\r\n                TAKE AGAIN\r\n            </Button>   \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultsMenu;","import React, { Fragment } from 'react';\nimport './App.css';\nimport NavBar from '../Components/NavBar/NavBar';\nimport QuestionCardList from '../Components/QuestionCardList/QuestionCardList';\nimport StartMenu from '../Components/StartMenu/StartMenu.js'\nimport SubmitButton from '../Components/SubmitButton/SubmitButton';\nimport ResultsMenu from '../Components/ResultsMenu/ResultsMenu';\n\nconst questionsArray = [\n  'A bat and a ball cost $1.10 in total. The bat costs $1.00 more than the ball. How much does the bat cost?',\n  'If it takes 5 machines 5 minutes to make 5 widgets, how long would it take 100 machines to make 100 widgets?',\n  'In a lake, there is a patch of lily pads. Every day, the patch doubles in size. If it takes 48 days for the patch to cover the entire lake, how long would it take for the patch to cover half of the lake?'\n];\n\nconst answersArray = [\n  ['$1.00', '$0.05', '*$1.05', '$0.10'],\n  ['60 minutes', '100 minutes', '20 minutes', '*5 minutes'],\n  ['24 days', '*47 days', '2 days', '12 days']\n];\n\nlet userAnswersArray = ['','',''];\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      quizStarted: false,\n      quizComplete: false,\n      correctAnswers: 0\n    }\n  }\n\n  quizStartHandler = () => {\n    this.setState({ quizStarted: true });\n  }\n  \n  submitClickedHandler = () => {\n    let numberOfCorrectAnswers = 0;\n    //if blank element found in array, user did not answer a question\n    userAnswersArray.forEach(answer => {\n      //if answer is correct, increment\n      if (answer === 'Correct') \n      numberOfCorrectAnswers++;\n    })\n    this.setState({ \n      correctAnswers: numberOfCorrectAnswers,\n      quizComplete: true\n    })\n  }\n  \n  radioChangeHandler = (event) => {\n    let cardID = event.target.value[0];\n    userAnswersArray[cardID] = event.target.value.substring(1, event.target.value.length - 1);\n  }\n  \n  render() {\n    return (\n      <div className='container'>\n        <NavBar timerDoneHandler={this.submitClickedHandler} quizStarted={this.state.quizStarted} quizComplete={this.state.quizComplete}/>\n        {this.state.quizComplete ?\n          <ResultsMenu correctAnswers={this.state.correctAnswers} userAnswersArray={userAnswersArray} /> :\n          <Fragment>\n            {this.state.quizStarted ? \n              <div>\n                <QuestionCardList questions={questionsArray} answers={answersArray} radioChangeHandler={this.radioChangeHandler}/> \n                <SubmitButton handler={this.submitClickedHandler}/> \n              </div> :\n              <StartMenu handler={this.quizStartHandler}/>\n            }\n          </Fragment>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}